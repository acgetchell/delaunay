name: Generate Performance Baseline

# Generate performance baselines for new releases
# Security: All GitHub context variables are passed through safe environment variables
# to prevent code injection attacks via malicious branch names or commit data
on:
  # Trigger on tag creation (releases)
  push:
    tags:
      - 'v*'

  # Manual trigger for testing
  workflow_dispatch:

# Security: Define minimal required permissions
permissions:
  contents: read
  actions: read

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  generate-baseline:
    concurrency:
      group: generate-baseline-${{ github.ref }}
      cancel-in-progress: false
    runs-on: macos-15  # Use same runner as benchmark workflow for consistency
    timeout-minutes: 60

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          fetch-depth: 0  # Full history for tag operations

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@02be93da58aa71fb456aa9c43b301149248829d8  # v1.15.1
        with:
          cache: true
          # Toolchain from rust-toolchain.toml

      - name: Install uv (Python package manager)
        uses: astral-sh/setup-uv@b75a909f75acd358c2196fb9a5f1299a9a8868a4  # v6.7.0
        with:
          version: "latest"

      - name: Verify uv installation
        run: uv --version

      - name: Determine tag information
        id: tag_info
        run: uv run benchmark-utils determine-tag

      - name: Generate performance baseline
        env:
          TAG_NAME: ${{ steps.tag_info.outputs.tag_name }}
        run: |
          echo "ðŸš€ Generating performance baseline for tag $TAG_NAME"
          mkdir -p baseline-artifact

          # Generate baseline using Python CLI tool
          uv run benchmark-utils generate-baseline \
            --output "baseline-artifact/baseline-$TAG_NAME.txt" \
            --tag "$TAG_NAME"

                    echo "âœ… Baseline generated successfully"

          # Display baseline summary
          uv run benchmark-utils display-summary \
            --baseline "baseline-artifact/baseline-$TAG_NAME.txt"

      - name: Prepare baseline artifact
        env:
          TAG_NAME: ${{ steps.tag_info.outputs.tag_name }}
          SAFE_COMMIT_SHA: ${{ github.sha }}
          SAFE_RUN_ID: ${{ github.run_id }}
        run: |
          # Create metadata file using Python utility
          uv run benchmark-utils create-metadata --tag "$TAG_NAME"

          echo "ðŸ“¦ Artifact contents:"
          ls -la baseline-artifact/

      - name: Create safe artifact name
        id: safe_name
        env:
          TAG_NAME: ${{ steps.tag_info.outputs.tag_name }}
        run: uv run benchmark-utils sanitize-artifact-name --tag "$TAG_NAME"

      - name: Upload baseline artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4.6.2
        with:
          name: ${{ steps.safe_name.outputs.artifact_name }}
          path: baseline-artifact/
          retention-days: 90   # Keep baselines ~90 days (align with repo settings; adjust if needed)
          compression-level: 6  # Good balance of speed/compression


      - name: Display next steps
        env:
          TAG_NAME: ${{ steps.tag_info.outputs.tag_name }}
          SAFE_COMMIT_SHA: ${{ github.sha }}
          SAFE_REF_TYPE: ${{ github.ref_type }}
        run: |
          echo "ðŸŽ‰ Performance baseline generated successfully!"
          echo ""
          echo "ðŸ“‹ Summary:"
          echo "  Tag: $TAG_NAME"
          echo "  Commit: $SAFE_COMMIT_SHA"
          echo "  Artifact: ${{ steps.safe_name.outputs.artifact_name }}"
          echo ""
          echo "ðŸ”„ The benchmark workflow will now use this baseline for:"
          echo "  â€¢ Pull request performance testing"
          echo "  â€¢ Main branch regression detection"
          echo "  â€¢ Manual performance comparisons"
          echo ""
          if [ "$SAFE_REF_TYPE" = "tag" ]; then
            echo "ðŸ’¡ This baseline is now available for release $TAG_NAME"
          fi
