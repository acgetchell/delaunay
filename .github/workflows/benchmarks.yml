name: Performance Regression Testing

# Run performance regression testing on important changes
on:
  # Manual trigger
  workflow_dispatch:

  # On pushes to main branch (not PRs to avoid CI environment noise)
  push:
    branches:
      - main
    # Only run on changes that could affect performance
    paths:
      - 'src/**'
      - 'benches/**'
      - 'Cargo.toml'
      - 'Cargo.lock'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  performance-regression:
    runs-on: macos-15-xlarge
    timeout-minutes: 45

    steps:
      - uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache: true
          # Toolchain from rust-toolchain.toml; no extra target needed on macOS-ARM

      - name: Check for performance baseline
        shell: bash
        run: |
          set -euo pipefail
          if [[ -f "benches/baseline_results.txt" ]]; then
            echo "‚úÖ Found performance baseline, proceeding with regression testing"
            echo "BASELINE_EXISTS=true" >> "$GITHUB_ENV"

            # Show baseline metadata
            echo "=== Baseline Information ==="
            head -n 3 benches/baseline_results.txt
          else
            echo "‚ö†Ô∏è No performance baseline found at benches/baseline_results.txt"
            echo "   To enable performance regression testing:"
            echo "   1. Run locally: ./scripts/generate_baseline.sh"
            echo "   2. Commit the generated benches/baseline_results.txt file"
            echo "   3. Future CI runs will test for performance regressions"
            echo ""
            echo "   Skipping benchmark regression testing for now."
            echo "BASELINE_EXISTS=false" >> "$GITHUB_ENV"
          fi

      - name: Extract baseline commit SHA
        if: env.BASELINE_EXISTS == 'true'
        shell: bash
        run: |
          set -euo pipefail
          bc_sha="$(grep "^Git commit:" benches/baseline_results.txt | awk '{print $3}' || true)"
          if [[ -n "$bc_sha" && "$bc_sha" =~ ^[0-9a-f]{7,40}$ ]]; then
            echo "BASELINE_COMMIT=$bc_sha" >> "$GITHUB_ENV"
          else
            echo "BASELINE_COMMIT=unknown" >> "$GITHUB_ENV"
          fi

      - name: Determine if benchmarks should run
        if: env.BASELINE_EXISTS == 'true'
        shell: bash
        run: |
          set -euo pipefail
          if [[ "$BASELINE_COMMIT" == "${{ github.sha }}" ]]; then
            echo "SKIP_BENCHMARKS=true" >> "$GITHUB_ENV"
          else
            if git diff --name-only "$BASELINE_COMMIT"... | grep -qE '^(src/|benches/|Cargo\.toml|Cargo\.lock)'; then
              echo "SKIP_BENCHMARKS=false" >> "$GITHUB_ENV"
            else
              echo "SKIP_BENCHMARKS=true" >> "$GITHUB_ENV"
            fi
          fi

      - name: Skip benchmarks if no code change
        if: env.SKIP_BENCHMARKS == 'true'
        shell: bash
        run: |
          set -euo pipefail
          echo "üîç Current commit matches baseline (${BASELINE_COMMIT}), skipping benchmarks."

      - name: Run performance regression test
        if: env.BASELINE_EXISTS == 'true' && env.SKIP_BENCHMARKS == 'false'
        shell: bash
        run: |
          set -euo pipefail
          echo "üöÄ Running performance regression test..."

          # This will exit with code 1 if significant regressions are found
          ./scripts/compare_benchmarks.sh

      - name: Display regression test results
        if: env.BASELINE_EXISTS == 'true' && env.SKIP_BENCHMARKS == 'false' && always()
        shell: bash
        run: |
          set -euo pipefail
          if [[ -f "benches/compare_results.txt" ]]; then
            echo "=== Performance Regression Test Results ==="
            cat benches/compare_results.txt
          fi

      - name: Upload regression test results
        if: env.BASELINE_EXISTS == 'true' && env.SKIP_BENCHMARKS == 'false' && always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-regression-results
          path: benches/compare_results.txt
          retention-days: 30
