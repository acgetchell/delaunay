# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow checks out code, performs a Codacy security scan
# and integrates the results with the
# GitHub Advanced Security code scanning feature.
# For more information on the Codacy security scan action usage and
# parameters, see https://github.com/codacy/codacy-analysis-cli-action.
# For more information on Codacy Analysis CLI in general, see
# https://github.com/codacy/codacy-analysis-cli.

name: Codacy Security Scan

concurrency:
  # This concurrency group ensures that only one Codacy analysis runs at a time
  group: codacy-${{ github.ref_name }}
  cancel-in-progress: true

on:
  push:
    branches: ["main"]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: ["main"]
  schedule:
    - cron: '42 0 * * 1'

permissions:
  contents: read

jobs:
  codacy-security-scan:
    permissions:
      # for actions/checkout to fetch code
      contents: read
      # for github/codeql-action/upload-sarif to upload SARIF results
      security-events: write
      # only required for a private repository by
      # github/codeql-action/upload-sarif to get the Action run status
      actions: read
    name: Codacy Security Scan
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0

      # Execute Codacy Analysis CLI and generate a SARIF output with
      # the security issues identified during the analysis
      - name: Run Codacy Analysis CLI
        uses: codacy/codacy-analysis-cli-action@562ee3e92b8e92df8b67e0a5ff8aa8e261919c08
        with:
          # Check https://github.com/codacy/codacy-analysis-cli#project-token
          # to get your project token from your Codacy repository.
          # You can also omit the token and run the tools that support
          # default configurations
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          verbose: true
          output: results.sarif
          format: sarif
          # Adjust severity of non-security issues
          gh-code-scanning-compat: true
          # Force 0 exit code to allow SARIF file generation
          # This will handover control about PR rejection to the GitHub side
          max-allowed-issues: 2147483647

      # Process SARIF file to split by tool
      - name: Split SARIF by tool
        run: |
          # Fail fast and surface errors clearly
          set -euo pipefail
          if [ -f "results.sarif" ] && [ -s "results.sarif" ]; then
            echo "Processing SARIF file with multiple tools..."
            # Extract each run and create separate SARIF files
            jq -c '.runs[]' results.sarif | while IFS= read -r run; do
              tool_name=$(echo "$run" | \
                jq -r '.tool.driver.name' | \
                tr -cs '[:alnum:]_.-' '_' | sed 's/^_*//; s/_*$//')
              echo "Processing tool: $tool_name"

              # Create a proper SARIF file for this tool
              schema_url="https://raw.githubusercontent.com/oasis-tcs/"
              schema_url+="sarif-spec/master/Schemata/sarif-schema-2.1.0.json"
              jq -n --argjson run "$run" \
                --arg schema "$schema_url" '{
                "$schema": $schema,
                "version": "2.1.0",
                "runs": [$run]
              }' > "sarif_${tool_name}.sarif"

              echo "Created sarif_${tool_name}.sarif"
            done
            # List generated files for debugging
            echo "Generated SARIF files:"
            ls -la *.sarif || echo "No SARIF files found"
            # Ensure at least one SARIF file exists for upload
            # If no split files were created, use the original results.sarif
            if ! ls sarif_*.sarif &>/dev/null; then
              echo "No split SARIF files found; preselecting results.sarif for upload"
              echo "SARIF_FILE=results.sarif" >> "$GITHUB_ENV"
            fi
          else
            echo "No SARIF file found or file is empty"
            echo "Creating empty SARIF file to prevent workflow failure"
            # Create empty SARIF file with proper schema
            echo '{' > sarif_empty.sarif
            schema_url="https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json"
            echo "  \"\$schema\": \"$schema_url\"," >> sarif_empty.sarif
            echo '  "version": "2.1.0",' >> sarif_empty.sarif
            echo '  "runs": []' >> sarif_empty.sarif
            echo '}' >> sarif_empty.sarif
            # Mark the empty SARIF for upload
            echo "SARIF_FILE=sarif_empty.sarif" >> "$GITHUB_ENV"
            exit 0
          fi

      # Upload SARIF files
      - name: Upload SARIF files
        run: |
          set -euo pipefail
          # Honor preselected SARIF_FILE from earlier steps (e.g., empty SARIF case)
          if [ -n "${SARIF_FILE:-}" ]; then
            echo "Preselected SARIF_FILE=$SARIF_FILE; not overriding."
            exit 0
          fi
          # First, try to upload the original results.sarif if it exists
          if [ -f "results.sarif" ] && [ -s "results.sarif" ]; then
            echo "Found results.sarif, attempting upload..."
            echo "SARIF_FILE=results.sarif" >> "$GITHUB_ENV"
          else
            echo "No results.sarif found, checking for split files..."
            # Look for any split SARIF files
            found_file=""
            for sarif_file in sarif_*.sarif; do
              if [ -f "$sarif_file" ] && [ -s "$sarif_file" ]; then
                echo "Found split SARIF file: $sarif_file"
                found_file="$sarif_file"
                break
              fi
            done

            if [ -n "$found_file" ]; then
              echo "SARIF_FILE=$found_file" >> "$GITHUB_ENV"
            else
              echo "No valid SARIF files found"
              echo "SARIF_FILE=" >> "$GITHUB_ENV"
            fi
          fi
        continue-on-error: true

      # Upload the identified SARIF file
      - name: Upload identified SARIF file
        if: env.SARIF_FILE != ''
        uses: github/codeql-action/upload-sarif@b36bf259c813715f76eafece573914b94412cd13  # v3
        with:
          sarif_file: ${{ env.SARIF_FILE }}
        continue-on-error: true
