name: CI
permissions:
  contents: read
concurrency:
  group: >
    ci-${{ github.workflow }}-${{
      github.event_name == 'pull_request' &&
      github.event.pull_request.number ||
      github.ref
    }}
  cancel-in-progress: true

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # Continue other jobs if one fails
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@2fcdc490d667999e01ddbbf0f2823181beef6b39  # v1.15.0
        with:
          target: ${{ matrix.target }}
          cache: true  # Built-in caching
          # toolchain, components, etc. are specified in rust-toolchain.toml

      - name: Check formatting
        if: matrix.os == 'ubuntu-latest'
        run: cargo fmt --all -- --check

      - name: Run clippy
        if: matrix.os == 'ubuntu-latest'
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Check documentation
        if: matrix.os == 'ubuntu-latest'
        run: |
          # Build documentation with warnings as errors
          RUSTDOCFLAGS="-D warnings" cargo doc --no-deps --all-features
          # Also check that examples in documentation compile
          cargo test --doc --all-features

      - name: Install uv (for Python linting)
        if: matrix.os == 'ubuntu-latest'
        uses: astral-sh/setup-uv@b75a909f75acd358c2196fb9a5f1299a9a8868a4  # v6.7.0
        with:
          version: "latest"

      - name: Lint Python scripts
        if: matrix.os == 'ubuntu-latest'
        run: |
          # Format check with ruff (non-blocking for now)
          uvx ruff format --check scripts/ || echo "Python formatting issues found"

          # Lint check with ruff (non-blocking for now)
          uvx ruff check scripts/ || echo "Python linting issues found"

          # Note: Pylint retired in favor of comprehensive ruff linting

      - name: Install shellcheck and shfmt
        if: matrix.os == 'ubuntu-latest'
        run: |
          # Install shellcheck
          sudo apt-get update
          sudo apt-get install -y shellcheck

          # Install shfmt
          SHFMT_VERSION="3.7.0"
          curl -fsSL \
            "https://github.com/mvdan/sh/releases/download/v${SHFMT_VERSION}/shfmt_v${SHFMT_VERSION}_linux_amd64" \
            -o shfmt
          chmod +x shfmt
          sudo mv shfmt /usr/local/bin/

      - name: Lint shell scripts
        if: matrix.os == 'ubuntu-latest'
        run: |
          # Lint shell scripts with shellcheck
          find scripts -type f -name '*.sh' -print0 | xargs -0 shellcheck

          # Check shell script formatting with shfmt
          find scripts -type f -name '*.sh' -exec shfmt -d {} +

      - name: Lint Markdown files
        if: matrix.os == 'ubuntu-latest'
        run: |
          # Lint Markdown files
          npx markdownlint "*.md" "scripts/*.md" "docs/*.md" ".github/*.md" || true

      - name: Lint YAML files
        if: matrix.os == 'ubuntu-latest'
        run: |
          # Install yamllint
          pip install yamllint

          # Lint YAML files
          find . -type f \( -name '*.yml' -o -name '*.yaml' \) -exec yamllint -c .yamllint {} + || true

      - name: Build (debug)
        run: cargo build --verbose --all-targets

      - name: Build (release)
        if: matrix.os == 'ubuntu-latest'
        run: cargo build --release --verbose

      - name: Run tests
        run: |
          cargo test --lib --tests --verbose
          cargo test --examples --verbose
